
缩略语和关键术语定义
如果交底书中使用了腾讯内部特有的缩略语或自定义的名词，请进行解释。
UI: User Interface(用户交互界面)的缩写.
UI编辑器: 用于给游戏开发人员设计UI, 并导出程序可识别的数据结构的工具.
UI元素: 用户交互界面中的最小单位,比如一个按钮,一张图片.
Unity3D: 是一个用于创建诸如三维视频游戏、建筑可视化、实时三维动画等类型互动内容的综合型创作工具.
UGUI: Unity3D引擎内置的UI框架.
i2d引擎: 自研的跨平台游戏引擎.
QT框架:1991年由奇趣科技开发的跨平台C++图形用户界面应用程序开发框架.

1、*发明点概述
此部分将主要作为评审专家评审的依据，请简要提炼发明的核心内容、阐述采用的关键技术和创新方法，300字左右。
UI(用户交互界面)是游戏产品的重要组成部分,好的UI不仅能使游戏风格变得有品味，还能让游戏的操作变得舒适.
UI往往由一系列图片和可交互元素(比如按钮,输入框)组合而成,在游戏制作中,我们往往用文本文件来记录UI的排版信息,以供程序解析加载.
另一方面,UI的排版往往对艺术性有较高要求,所以前期的设计工作会交由专业美术人员进行.
但是,美术人员的设计结果以图片形式输出,而最终游戏程序需要将图片中的信息转化成文本形式,这个步骤一定需要工具来辅助进行,这类工具就是UI编辑器.
几乎每一种游戏引擎都会配备自己的UI编辑器,本发明实现了工作室自研i2d游戏引擎引擎UI编辑器.

关键技术：实现i2d引擎UI文件的多层结构.
结果：编辑器用户体验良好,大大降低美术/策划人员的学习成本, 提高团队产出效率.

2、*与本方案最相近的现有技术
一个基于QT框架实现的UI编辑器.

2.1现有技术的技术方案
提供与本立项接近的现有技术以及存在的缺陷，建议以图文结合的方式。
一个使用c++语言基于QT框架进行开发的,功能比较简陋的编辑器.

它的主要功能
1)加载整个项目的UI框架
2)查看单个UI界面
3)简单的编辑操作(不支持拖拽)
4)保存编辑结果

2.2现有技术的缺点及本技术方案会解决的问题
技术缺点可以是现有技术成本高、误码率高、传输速度慢、安全性差等类似问题，对于个人用户体验不佳等人为感知的因素，应挖掘其背后技术内涵的不足。
现有方案缺陷: 
1)功能不完善, 几乎无法进行基本的添加和删除操作.
2)用户体验差, 甚至不支持拖拽
3)加载和刷新速度慢, 程序经常崩溃
4)学习成本高

本方案会解决的问题:
1)完善功能
2)结合 unity自身的特性, 大大提升用户体验
3)大幅提升性能, 降低崩溃率
4)容易学习, 对美术和策划人员友好.

3、*本技术方案的详细阐述 
此部分请描述发明方案的详细技术方案，以及如何解决现有技术中的问题，不能只有原理，也不能只做产品操作或者功能的介绍。
落守卫战手游项目UI编辑器截图:

本技术方案首先解析UI文件并通过unity绘制出来,为用户呈现一个友好的可交互界面.它允许用户在界面上通过拖拽,缩放,增删等操作进行UI设计,最后把结果输出到UI文件中.

1)UI 数据结构
本技术方案的UI数据从上到下划分为3个模块:页面(page),实体(entity),纹理(texture).它们的存在形式是三组独立的xml文件.
每个页面文件对应着一个具体的UI界面.页面文件由一系列组件(component)节点组成,每个节点都对应着UI界面上的一个元素,比如一个按钮,一张图片,一行文字.
组件节点中主要存储UI元素在这个界面中的与排版有关的信息:索引名称,尺寸,对齐方式,锚点,图层和坐标.另外节点还储存一个实体索引,用以在实体文件中定位节点的内容.

实体文件中定义一组不同种类的UI元素,为界面中的组件提供外观,以及划分功能.实体文件中可以定义按钮,图片,列表,文字等.
UI元素节点包含的信息可能是元素种类,纹理索引,字号,文字颜色,文字描边,文字内容等.其中纹理索引关联着纹理文件中的一张图片,它决定这个UI元素在UI界面中的外观.
一个实体文件中的元素一般提供给一个或几个相似的页面文件使用,因为一个实体文件被读取到内存后,其中所使用到的纹理也会被全部加载到内存中.

纹理文件是一系列纹理元素的集合,每个纹理元素储存一张图片的尺寸,格式,名称.位于同一个纹理文件中的图片在游戏打包后会被合并到一张1024*1024的大纹理上,以提高游戏运行效率.
一般同一个纹理文件中储存几个相似的界面所使用的图片,如果这些图片合并后尺寸超过1024*1024,则需要将它们拆分到不同的纹理文件中.

1)UI 数据解析
原始的UI数据储存在xml中, 开发编辑器的第一步就是解决xml文件的读写和序列化.

本技术方案首先统计部落守卫战i2d引擎中所使用的所有UI元素xml节点及其属性, 为每种节点实现对应的c#类, 然后使用.Net Framework中的Xml Serialization来实现xml读写操作.
示例代码:


2)UI元素绘制和排版
解析后的xml节点需要被绘制在Unity场景中. 本方案采用Unity原生的UI框架UGUI进行绘制, 每一个部落UI元素对应一个UGUI Texture (纹理)元素,
部落UI的排版规则与Unity有些出入, 本方案根据实际需要实现了排版规则转换逻辑.
示例代码:


3)UI纹理动态读取
现有的技术方案每次刷新操作都要重新加载游戏中所有纹理, 会导致十几秒卡顿, 效率低下, 体验差.
为了解决上述问题, 本方案采用动态加载技术, 既需要绘制时才把相应纹理加载到内存并缓存下来. 这样用户几乎感受不到卡顿, 提升了效率和体验.

4)操作界面
原有技术方案的操作界面设计粗糙, 易用性差.
本方案做出的改善包括:
隐藏美术和策划不需要的部分, 减少视觉干扰
利用Unity场景编辑器, 提供完美的拖拽,缩放等体验. 旧方案中只能笨拙的通过编辑数字实现, 低效,不直观.
新方案:

       

旧方案: 


在ui结构预览界面中体现出元素的层级关系
        本方案:
          
        旧方案(全部平铺, 没有层级):
        

 提供一些旧方案中没有的快捷操作:
     - 模糊搜索:
       
     - 快捷添加预设组件
       
     - 快捷保存
       



3.1 产品侧
此部分请描述发明方案在产品侧的应用场景、功能特性及操作方式，必要时结合UI界面交互图进行说明，例如，方案应用于哪个/哪类产品中，具有何种功能、如何使用等。
3.2技术侧
此部分请描述发明方案在技术侧的硬件环境、实现逻辑（包括前端和后台），以及对数据的处理流程，必要时提供网络拓扑图、流程图、时序图等进行详细说明；
建议通过图文结合的方式，列出硬件架构图、流程图、时序图等，结合图示对相关装置、流程、时序进行详细说明，重点突出创新要点。

4、技术方案所产生的有益效果
有益效果是指交底书的技术方案能带来的技术效果，可以是某一点技术改进带来的技术效果，也可以是技术方案整体带来的技术效果。
   为游戏团队提供了直观, 高效, 易用的UI编辑工具. 策划人员得以快速制作原型, 美术人员得以专心的调整视觉效果, 而不必关心UI数据结构的实现细节, 降低了新人的学习成本. 最终整体提高了团队的开发效率.
5、发散思维，针对3中的技术方案，是否还有其他别的替代方案
此部分内容用于扩展创新方案，扩大专利的保护范围，防止他人绕过本技术方案去实现同样的发明目的；替代方案可以是部分结构、部件、方法步骤的替代，也可以是完整技术方案的替代。
直接编写UI的XML文件.
缺点:学习成本巨大, 几乎只有程序能够完全掌握.
