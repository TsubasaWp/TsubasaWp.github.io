#+TITLE:     SICP Reading Note - ch1
#+AUTHOR:    Tsubasa
#+EMAIL:     tsubasa.wp@gmail.com
#+DATE:      2016-03-09

sicp窝终于回来了...

[前言]
首先总结一下前言吧. 这本书的目标是教授一种通用的方法学思想, 不仅限于计算机程序设计.
采用scheme(lisp的一种方言)教授这门课,是因为它集powerful与beautiful于一身.

ps:第一句话说这本书是MIT计算机科学的入门教材...看到这个我就跪下了. 

* 构造过程抽象
计算过程: 存在于计算机里的一类抽象事物,这些过程会去操作一些称为 =数据= 的抽象事物. 人们创建出一些称为 =程序= 的规则模式, 以指导这类过程的进行.

计算过程的lisp描述本身可以作为lisp的数据来表示和操作. 这种灵活性使lisp称为探索语言特征的最方便的语言之一.

** 程序设计的基本元素
一个powerful的语言, 除了能够执行任务, 更应该能帮助程序猿组织自己的思想.

- 基本表达形式
- 组合的方法
- 抽象的方法

在程序设计中,我们需要处理两类要素:过程和数据. 本章把重点放在过程上.

*** 表达式
最简单的表达式: 42, 表示基本过程的表达式: ( + 42 42 ). '+'称为 =运算符=, 数字是 =运算对象=, 求值过程就是将运算符所刻画的运算过程应用于运算对象.

lisp把运算符放在左边, 称为 =前缀表示=. 前缀表示的优点是:
- 可以带有任意个实参而没有歧义
- 可以直接扩充, 允许出现组合式嵌套, 如(+ ( * 3 5 ) ( - 10 6))

*** 命名和环境
程序设计语言需要提供一种[通过名字去使用计算对象]的方式.

在scheme中, 命名通过define来进行.
: (define size 2)
我们可以把值2与符号size关联, 又能够提取出这个值, 这说明解释器有存储能力,以维护名字-值对偶的轨迹, 这种存储称为 =环境=.

*** 组合式求值
求值一个组合式的步骤是:
- 1) 求值该组合式的各个子表达式
- 2) 将作为最左子表达式的值的过程应用于相应的实际参数.

没错就是递归. 递归是一种处理层次结构的强有力的技术. 这种计算过程称为=树形积累=.

在求值过程中, =环境=用于确定表达式中各个符号的意义, 它为求值过程提供了一种上下文.

例外: 对表达式 (define x 1) 求值不是把define运用于两个参数, 因为define的作用是关联x和1, 也就是说(define x 1)不是一个组合式. 这种例外称为 =特殊形式= .

*** 复合过程
上述的某些元素也会出现在其它语言中:
- 数和算术运算是基本的数据和过程
- 组合式的嵌套提供了一种组织起多个操作的方法
- 定义是一种受限的抽象手段, 它为名字关联响应的值.

下面来讲威力更强大的 =过程定义=
: (define (square x) (* x x ))
上面定义了一个复合过程square, 定义好之后可以这样使用
: (square 21)
有点像定义函数. 接下来我们可以把square作为基本构建去定义其它过程
: (define (sum-of-squares x y) ( + (square x) (square Y)))

复合过程的使用方式与基本过程完全一致.

*** 过程应用的代换模型
对带有复合过程的组合式求值, 解释器会先"展开"复合过程, 把问题规约为对另一个组合式求值. 
: (square 21) -> (* 21 21)
这种计算过程称为过程应用的 =代换模型=

=应用序=: 先求值参数而后应用的求值模型

=正则序=: 完全展开而后规约的求值模型

lisp采用应用序求值, 部分原因在于这样可以避免对于表达式的重复求值, 重点是在超出可以采用替换方式模拟的过程范围之后, 正则序的处理将变得复杂的多.

*** 条件表达式和谓词 
    条件表达式
依据不同情况采取不同动作的结构叫做 =分情况分析=
=cond=
: (cond ((> x 0 )x) ((= x 0) 0) ((< x 0) (-x)))
: (cond ((< x 0) (-x) (else x)))
else是一个特殊符号,可以用在cond最后一个位置,如果cond所有分支都被跳过,就会返回else的值
=if=
: (if (< x 0) (-x) x)
if是cond的一种受限形式, 适用于只有两种情况的分析.
谓词: =< > and or not= ...
注意and和or都是特殊形式,它们的子表达式不一定求值. not则是一个普通过程.

*** [习题]
 - 1.1 .求值(选做一部分)
 (define a 3) -> a
 (define b ( + a 1)) -> b
 (= a b) -> #f

 - 1.2 将下面表达式变换为前缀形式:
 (5+4+(2-(3-(6+5/4))))/(3*(6-2)(2-7))

 : (/ (+ 5 4 (- 2 (- 3 ( + 6 (/ 5 4))))) (* 3 (- 6 2) ( - 2 7)))

 - 1.3 定义一个过程, 它以三个数为参数, 返回其中较大的两个数之和
 : (define (min x y z) 
 :       (cond (((< x y) and (< x z))  x)
 : 	(((< y x) and (< y z))  y)
 : 	(else z)))
 : (define (sum2 x y z) (- (+ x y z) (min x y z )))

 - 1.4 仔细考察上面给出的允许运算符为复合表达式的组合式的求值模型, 根据对这一模型的认知描述下面过程的行为:
 : (define (a-plus-abs-b a b) ((if (> b 0)  + -) a b))
 - 对子表达式(> b 0)求值, 得结果r1
 - 对子表达式(if (r1) + -)求值, 得到结果r2, r2是运算过程.
 - 对(r2 a b)求值

 - 1.5 Ben发明了一种检测方法,能够确定解释器以正则序求值, 还是以应用序求值. 他定义了下面两个过程:
 : (define (p) (p))
 : (define (test x y) (if ( = x 0) 0 y))
 : (test 0 (p))
 用应用序和正则序解释器运行它们, 最终会发生什么?
 - 应用序: 0
 - 正则序: 无限循环. 因为无论(= x 0)的结果如何, y都会被求值.

** 实例:采用牛顿法求平方根
上面介绍的过程都很像常规数学函数, 然而数学和计算机过程有一些区别:
- 数学关心说明性的描述(是什么)
- 计算机关心行动性的描述(怎么做)

一个求平方根的数学描述是: squrt(x) = y, y>=0 && y^2=x. 我们无法把它直译成计算机函数.
计算机求平方根的常用方法是:
=牛顿逐步逼近法= : 先猜测一个值a, 并计算b = x/a, 比较a和b是否足够相似, 如果不满足条件则执行一些操作得到更好的猜测a2, 循环往复直到求出平方根.

基本策略:
: (define (sqrt-iter guess x)
:   (if (good-enough guess x)
:       guess
:       (sqrt-iter (improve guess x) x)))

填充细节:
: (define (improve guess x)
:   (average guess (/ x guess)))
: 
: (define (average x y) (/ (+ x y) 2))
: 
: (define (good-enough guess x)
:         (< (abs (- (square guess) x)) 0.001))

启动:
: (define (squrt x) (sqrt-iter 1.0 x))    

*** [习题]
- 1.6 可否通过cond定义一个常规过程来代替if呢? Eva尝试写了以下程序, 
问: 如果用这个new-if来实现求平方根程序sqrt-iter,会有什么问题
: (define (new-if predicate then-clause else-clause)
:         (cond (predicate then-clause)
:               (else else-clause)))
答: 问题在于cond的所有分支都会被求值. 
sqrt-iter是递归,if满足条件时不对else-clause求值, 从而可以停止递归调用.
而new-if由于所有分支都会无条件求值, 所以它应用于递归函数时根本停不下来.

- 1.7 上面good-enough的实现对于很小或很大的数来说不太好, 请给出证明.
如果使用监测猜测值改变比率的方式, 对于大数或小数来说可以工作吗?
- 对于小于0.001(good-enough的临界值)的小数,good-enough无法进行正确的判断.
对于大数来说, 由于精度不足以表示guess和x之间的差(good-enough几乎永远为false), 程序陷入死循环.
- 改变比率的算法对大数和小数都可以工作.
: (define (good-enough old-guess new-guess)
:         (< (/ (abs (- old-guess new-guess)) old-guess) 0.01))

- 1.8 用牛顿法求立方根
如果y是x立方根的一个近似值,那么下面公式可以给出一个更好的近似值: (x/y^2 +2*y)/3
: (define (cube-iter guess x)
:   (if (good-enough-cube guess x)
:       guess
:       (cube-iter (improve-cube guess x) x)))
: 
: (define (good-enough-cube guess x)
:         (< (abs (- (* guess guess  guess) x)) 0.001))
: 
: (define (improve-cube y x)
:     (/ (+ (/ x (* y y)) (* 2 y)) 3))
: 
: (define (cube x) (cube-iter 1 x))

** 过程作为黑箱抽象
=过程抽象= 一个过程的定义应当能隐藏起一些细节,使得过程的使用者可以直接复用而不必关心实现细节.

*** 局部名
过程的意义应该不依赖于其作者为形式参数所选定的名字.

一个过程的定义 =约束= 了它所有形式参数,形参的具体名字完全没有关系, 这样的名字称为 =约束变量= .
相反如果一个变量不是被约束的, 它就是 =自由的=. 

*** 内部定义和块结构
平方根程序有个问题, 它由许多分离的过程组成, 而实际用户只关心sqrt这一个过程, 其它过程不必暴露给用户.
(要运行这个程序也很蛋疼啊...)

所以,我们需要把这些麻烦的子过程局部化, 把它们隐藏到sqrt里面.

: (define (sqrt x)
:    (define (good-enough ...))
:    (define (improve-guess ...))
:    (if (good-enough ...) ...)) ;;懒得敲了,自行脑补吧...

这种嵌套的定义称为 =块结构=. 它是最简单的名字包装问题的一种正确解决方式. (讲道理这话真的是绕...

另外, 采用这种结构除了可以把辅助过程隐藏之外, 还可以利用 =词法作用域= 来简化辅助过程的形参.
对这个例子来说,可以省略掉许多x.

[小历史] 块结构的思想来自程序设计语言Algol 60.




