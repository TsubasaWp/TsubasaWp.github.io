#+TITLE:     SICP Reading Note - ch1
#+AUTHOR:    Tsubasa
#+EMAIL:     tsubasa.wp@gmail.com
#+DATE:      2016-03-09

sicp窝终于回来了...

[前言]
首先总结一下前言吧. 这本书的目标是教授一种通用的方法学思想, 不仅限于计算机程序设计.
采用scheme(lisp的一种方言)教授这门课,是因为它集powerful与beautiful于一身.

ps:第一句话说这本书是MIT计算机科学的入门教材...看到这个我就跪下了. 

* 构造过程抽象
计算过程: 存在于计算机里的一类抽象事物,这些过程会去操作一些称为 =数据= 的抽象事物. 人们创建出一些称为 =程序= 的规则模式, 以指导这类过程的进行.

计算过程的lisp描述本身可以作为lisp的数据来表示和操作. 这种灵活性使lisp称为探索语言特征的最方便的语言之一.

** 程序设计的基本元素
- 基本表达形式
- 组合的方法
- 抽象的方法

在程序设计中,我们需要处理两类要素:过程和数据. 本章把重点放在过程上.

*** 表达式
最简单的表达式: 42, 表示基本过程的表达式: ( + 42 42 ). '+'称为=运算符=, 数字是 =运算对象=, 求值过程就是将运算符所刻画的运算过程应用于运算对象.

lisp把运算符放在左边, 称为 =前缀表示=. 前缀表示的优点是:
- 可以带有任意个实参而没有歧义
- 可以直接扩充, 允许出现组合式嵌套, 如(+ ( * 3 5 ) ( - 10 6))

*** 命名和环境
程序设计语言需要提供一种[通过名字去使用计算对象]的方式.

在scheme中, 命名通过define来进行.
: (define size 2)
我们可以把值2与符号size关联, 又能够提取出这个值, 这说明解释器有存储能力,以维护名字-值对偶的轨迹, 这种存储称为 =环境=.

*** 组合式求值
求值一个组合式的步骤是:
- 1) 求值该组合式的各个子表达式
- 2) 将作为最左子表达式的值的过程应用于相应的实际参数.

没错就是递归. 递归是一种处理层次结构的强有力的技术. 这种计算过程称为=树形积累=.

在求值过程中, =环境=用于确定表达式中各个符号的意义, 它为求值过程提供了一种上下文.

例外: 对表达式 (define x 1) 求值不是把define运用于两个参数, 因为define的作用是关联x和1, 也就是说(define x 1)不是一个组合式. 这种例外称为 =特殊形式= .

*** 复合过程
上述的某些元素也会出现在其它语言中:
- 数和算术运算是基本的数据和过程
- 组合式的嵌套提供了一种组织起多个操作的方法
- 定义是一种受限的抽象手段, 它为名字关联响应的值.

下面来讲威力更强大的 =过程定义=
: (define (square x) (* x x ))
上面定义了一个复合过程square, 定义好之后可以这样使用
: (square 21)
有点像定义函数. 接下来我们可以把square作为基本构建去定义其它过程
: (define (sum-of-squares x y) ( + (square x) (square Y)))

复合过程的使用方式与基本过程完全一致.

*** 过程应用的代换模型
对带有复合过程的组合式求值, 解释器会先"展开"复合过程, 把问题规约为对另一个组合式求值. 
: (square 21) -> (* 21 21)
这种计算过程称为过程应用的 =代换模型=

=应用序=: 先求值参数而后应用的求值模型

=正则序=: 完全展开而后规约的求值模型

lisp采用应用序求值, 部分原因在于这样可以避免对于表达式的重复求值, 重点是在超出可以采用替换方式模拟的过程范围之后, 正则序的处理将变得复杂的多.

*** 条件表达式和谓词 
    条件表达式
=cond=
: (cond ((> x 0 )x) ((= x 0) 0) ((< x 0) (-x)))
: (cond ((< x 0) (-x) (else x)))
else是一个特殊符号,可以用在cond最后一个位置,如果cond所有分支都被跳过,就会返回else的值
=if=
: (if (< x 0) (-x) x)
if是cond的一种受限形式, 适用于只有两种情况的分析.
谓词: =< > and or not= ...
注意and和or都是特殊形式,它们的子表达式不一定求值. not则是一个普通过程.

** [习题]
- 1.1 .求值(选做一部分)
(define a 3) -> a
(define b ( + a 1)) -> b
(= a b) -> #f

- 1.2 将下面表达式变换为前缀形式
(5+4+(2-(3-(6+5/4))))/(3*(6-2)(2-7))

(/ (+ 5 4 (- 2 (- 3 ( + 6 (/ 5 4))))) (* 3 (- 6 2) ( - 2 7)))
